/* Copyright 2017 Esri
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import QtQuick 2.7
import QtQuick.Layouts 1.1
import QtQuick.Controls 2.1
import QtQuick.Controls.Material 2.1
import QtGraphicalEffects 1.0
import QtQuick.Dialogs 1.2

import ArcGIS.AppFramework 1.0
import ArcGIS.AppFramework.Controls 1.0
import Esri.ArcGISRuntime 100.1

import "controls" as Controls

App {
    id: app
    width: 414
    height: 736
    function units(value) {
        return AppFramework.displayScaleFactor * value
    }
    property real scaleFactor: AppFramework.displayScaleFactor
    property int baseFontSize : app.info.propertyValue("baseFontSize", 15 * scaleFactor) + (isSmallScreen ? 0 : 3)
    property bool isSmallScreen: (width || height) < units(400)

    property bool busy: false
    property string message: ""
    property var facilities: []
    property var facilityParams: null

    Page{
        anchors.fill: parent
        header: ToolBar{
            id:header
            width: parent.width
            height: 50 * scaleFactor
            Material.background: "#8f499c"
            Controls.HeaderBar{}
        }

        // sample starts here ------------------------------------------------------------------
        contentItem: Rectangle{
            anchors.top:header.bottom
            // Map view UI presentation at top
            MapView {
                id: mapView

                anchors.fill: parent
                Button{
                    id:homeButton
                    Image{
                        source: "./images/home.png"
                        height: 40 * scaleFactor
                        width : height
                        anchors.centerIn: parent
                    }

                    height: 40 * scaleFactor
                    width : height

                    onHoveredChanged: hovered ? homeButton.opacity = 1 : homeButton.opacity = .5;
                    opacity: .5

                    onClicked:{
                        mapView.setViewpointWithAnimationCurve(map.initialViewpoint, 1.0, Enums.AnimationCurveEaseInOutCubic)
                        mapView.setViewpointRotation(mapView.initialMapRotation)

                    }
                }
                Button{
                    id:locationButton
                    Image{
                        source:"./images/location.png"
                        height: 30 * scaleFactor
                        width: height
                        anchors.centerIn: parent
                    }
                    onHoveredChanged: hovered ? locationButton.opacity = 1 : locationButton.opacity = .5;
                    height: 40 * scaleFactor
                    width : height
                    opacity: .5

                    onClicked: {
                        if (!mapView.locationDisplay.started) {
                            mapView.locationDisplay.start()
                            mapView.locationDisplay.autoPanMode = Enums.LocationDisplayAutoPanModeRecenter
                        } else {
                            mapView.locationDisplay.stop()
                        }
                    }

                }
                Map {
                    BasemapStreets {}

                    initialViewpoint: ViewpointCenter {
                        Point {
                            x: -122.44
                            y: 47.25
                            //spatialReference: SpatialReference.createWebMercator()
                            spatialReference: SpatialReference.createWgs84()
                        }
                        targetScale: 1e5
                    }

                    onLoadStatusChanged: {

                        createFacilities();
                        task.load();

                        function createFacilities() {
                            facilitiesOverlay.graphics.forEach(function(graphic) {
                                var facility = ArcGISRuntimeEnvironment.createObject("Facility", {geometry: graphic.geometry});
                                facilities.push(facility);
                            });
                        }
                    }
                }

                GraphicsOverlay {
                    id: facilitiesOverlay

                    renderer: SimpleRenderer {
                        symbol: PictureMarkerSymbol {
                            url: "http://static.arcgis.com/images/Symbols/SafetyHealth/Hospital.png"
                            height: 30
                            width: 30
                        }
                    }

                    Graphic {
                        geometry: Point {
                            x: -122.45254
                            y:  47.257
                            //spatialReference: SpatialReference.createWebMercator()
                              spatialReference: SpatialReference.createWgs84()
                        }
                    }

                    Graphic {
                        geometry: Point {
                            x: -122.477380
                            y: 47.24212
                            //spatialReference: SpatialReference.createWebMercator()
                              spatialReference: SpatialReference.createWgs84()
                        }
                    }

                    Graphic {
                        geometry: Point {
                            x: -122.447785
                            y: 47.2442
                            //spatialReference: SpatialReference.createWebMercator()
                              spatialReference: SpatialReference.createWgs84()
                        }
                    }

                    Graphic {
                        geometry: Point {
                            x: -122.409416
                            y: 47.236472
                            //spatialReference: SpatialReference.createWebMercator()
                              spatialReference: SpatialReference.createWgs84()
                        }
                    }

                    Graphic {
                        geometry: Point {
                            x: -122.452793
                            y: 47.26066
                            //spatialReference: SpatialReference.createWebMercator()
                              spatialReference: SpatialReference.createWgs84()
                        }
                    }

                    Graphic {
                        geometry: Point {
                            x: -122.46089
                            y:  47.256519
                            //spatialReference: SpatialReference.createWebMercator()
                              spatialReference: SpatialReference.createWgs84()
                        }
                    }

                    Graphic {
                        geometry: Point {
                            x: -122.45251
                            y: 47.257500
                            //spatialReference: SpatialReference.createWebMercator()
                              spatialReference: SpatialReference.createWgs84()
                        }
                    }

                    Graphic {
                        geometry: Point {
                            x: -122.450671
                            y: 47.248741
                            //spatialReference: SpatialReference.createWebMercator()
                              spatialReference: SpatialReference.createWgs84()
                        }
                    }
                }

                GraphicsOverlay {
                    id: resultsOverlay
                }

                onMouseClicked: {
                    if (busy === true)
                        return;

                    if (facilityParams === null)
                        return;

                    resultsOverlay.graphics.clear();

                    var incidentGraphic = ArcGISRuntimeEnvironment.createObject(
                                "Graphic", {geometry: mouse.mapPoint, symbol: incidentSymbol});
                    resultsOverlay.graphics.append(incidentGraphic);

                    solveRoute(mouse.mapPoint);

                    function solveRoute(incidentPoint) {
                        var incident = ArcGISRuntimeEnvironment.createObject("Incident", {geometry: incidentPoint});
                        facilityParams.setIncidents( [ incident ] );

                        busy = true;
                        message = "";
                        task.solveClosestFacility(facilityParams);
                    }
                }
            }

            SimpleMarkerSymbol {
                id: incidentSymbol
                style: "SimpleMarkerSymbolStyleCross"
                color: "black"
                size: 20
            }

            SimpleLineSymbol {
                id: routeSymbol
                style: "SimpleLineSymbolStyleSolid"
                color: "#8f499c"
                width: 2.0
            }

            ClosestFacilityTask {
                id: task
                url: "http://sampleserver6.arcgisonline.com/arcgis/rest/services/NetworkAnalysis/SanDiego/NAServer/ClosestFacility"

                onLoadStatusChanged: {
                    if (loadStatus !== Enums.LoadStatusLoaded)
                        return;

                    setupRouting();

                    function setupRouting() {
                        busy = true;
                        message = "";
                        task.createDefaultParameters();
                    }
                }

                onCreateDefaultParametersStatusChanged: {
                    if (createDefaultParametersStatus !== Enums.TaskStatusCompleted)
                        return;

                    busy = false;
                    facilityParams = createDefaultParametersResult;
                    facilityParams.setFacilities(facilities);
                }

                onSolveClosestFacilityStatusChanged: {
                    if (solveClosestFacilityStatus !== Enums.TaskStatusCompleted)
                        return;

                    busy = false;

                    if (solveClosestFacilityResult === null || solveClosestFacilityResult.error)
                        message = "Incident not within San Diego Area!";

                    var rankedList = solveClosestFacilityResult.rankedFacilityIndexes(0);
                    var closestFacilityIdx = rankedList[0];

                    var incidentIndex = 0; // 0 since there is just 1 incident at a time
                    var route = solveClosestFacilityResult.route(closestFacilityIdx, incidentIndex);

                    var routeGraphic = ArcGISRuntimeEnvironment.createObject(
                                "Graphic", { geometry: route.routeGeometry, symbol: routeSymbol});
                    resultsOverlay.graphics.append(routeGraphic);
                }

                onErrorChanged: message = error.message;
            }

            BusyIndicator {
                Material.accent: "#8f499c"
                anchors.centerIn: parent
                running: busy
            }

            MessageDialog {
                id: messageDialog
                title: "Route Error"
                text: message
                visible: text.length > 0
            }
        }
    }


    // sample ends here ------------------------------------------------------------------------
    Controls.DescriptionPage{
        id:descPage
        visible: false
    }
}

